<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id=".-M0XUXDaM,yij[rsuhN" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="WEcBVY[uF4pJ!x~,/h`z"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tcs34725 {" line1="    // I2C address of TCS34725 (fixed)" line2="    const TCS34725_ADDRESS = 0x29;" line3="" line4="    // Command bit for register access" line5="    const TCS34725_COMMAND_BIT = 0x80;" line6="" line7="    // Register map" line8="    const ENABLE = 0x00;   // Enable register" line9="    const ATIME = 0x01;    // Integration time" line10="    const ID = 0x12;       // Device ID register" line11="    const CDATA = 0x14;    // Clear channel data" line12="    const RDATA = 0x16;    // Red channel data" line13="    const GDATA = 0x18;    // Green channel data" line14="    const BDATA = 0x1A;    // Blue channel data" line15="" line16="    // Initialization flag" line17="    let _initialized = false;" line18="" line19="    // Helper: Write to I2C register" line20="    function writeReg(reg: number, value: number): void {" line21="        pins.i2cWriteNumber(TCS34725_ADDRESS, (TCS34725_COMMAND_BIT | reg) &lt;&lt; 8 | value, NumberFormat.UInt16BE);" line22="    }" line23="" line24="    // Helper: Read 16-bit value from register" line25="    function readWordReg(reg: number): number {" line26="        pins.i2cWriteNumber(TCS34725_ADDRESS, (TCS34725_COMMAND_BIT | reg) &lt;&lt; 8, NumberFormat.UInt16BE);" line27="        return pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt16LE);" line28="    }" line29="" line30="    //% block=&quot;Initialize TCS34725&quot;" line31="    //% subcategory=&quot;Configuration&quot;" line32="    export function initialize(): void {" line33="        if (_initialized) return;" line34="" line35="        // Check device ID (0x44 for TCS34725)" line36="        if (readWordReg(ID) != 0x0044) {" line37="            return; // Sensor not detected" line38="        }" line39="" line40="        // Power on and enable RGB measurements" line41="        writeReg(ENABLE, 0x01); // Power ON" line42="        writeReg(ENABLE, 0x03);  // Power + RGBC" line43="        writeReg(ATIME, 0xFF);   // Set integration time (2.4ms)" line44="" line45="        _initialized = true;" line46="        basic.pause(3); // Wait for first measurement" line47="    }" line48="}" numlines="49"></mutation></block></statement></block></xml>